import React from 'react';
import Command from '../command';
import { CommandHeader, InputControl } from './konva';
import { Layer, Group, Rect, Text } from 'react-konva';

function meow(commands: any[]) {

  return (
    <Layer>
      {commands.map((element, index) => (
        <Group
          x={element.x}
          y={element.y}
          draggable
          onDragEnd={(e) => {
            const ele = element;
            ele.x = e.target.position().x;
            ele.y = e.target.position().y;
            replaceCommand(ele, index);
          }}
        >
          <Rect
            width={width}
            height={calculateFullHeigh(element.value.rows)}
            fill={element.value.color}
            cornerRadius={10}
            stroke="black"
            strokeWidth={2}
          />

          <CommandHeader
            command={element}
            index={index}
            onCopy={(meow) => {}}
            onDelete={(meow) => {}}
          />

          <Group x={padding} y={headerHeight}>
            <Rect
              width={widthPadded}
              height={calculateValueHeigh(element.value.rows)}
              fill={'#0009'}
              cornerRadius={5}
            />
            {element.value.fields.map((meow, key) => {
              const fieldSize =
                meow.fieldSize * (widthPadded / element.value.columns);
              const x = meow.x * fieldSize;
              const y = meow.y * valueHeight;

              return (
                <Group x={x} y={y} key={`${key}${element.value.name}`}>
                  <Text
                    x={padding}
                    y={doublePadding + 2}
                    fontSize={14}
                    text={meow.placeHolder}
                    fill="white"
                  />
                  <Rect
                    x={meow.placeHolderWidth}
                    y={padding}
                    width={fieldSize - padding - meow.placeHolderWidth}
                    height={30 - padding}
                    fill={element.value.color}
                    cornerRadius={5}
                  />
                  <Text
                    x={meow.placeHolderWidth + padding}
                    y={doublePadding + 5}
                    width={fieldSize - doublePadding - meow.placeHolderWidth}
                    fill={'white'}
                    fontSize={11}
                    height={11}
                    text={`${meow.displayValue ? meow.displayValue : meow.value}`}
                    ellipsis={true}
                  />
                  <Rect
                    x={meow.placeHolderWidth}
                    y={padding}
                    width={fieldSize - padding - meow.placeHolderWidth}
                    height={30 - padding}
                    onClick={() => {}}
                  />
                </Group>
              );
            })}
          </Group>
        </Group>
      ))}
    </Layer>
  );
}
